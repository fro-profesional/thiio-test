name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env: 
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  DENO_DEPLOY_TOKEN: ${{ secrets.DENO_DEPLOY_TOKEN }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  GITHUB_CLIENT_ID: ${{ secrets.OATH_GITHUB_CLIENT_ID }}
  GITHUB_CLIENT_SECRET: ${{ secrets.OATH_GITHUB_CLIENT_SECRET }}
  GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
  GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
  APP_KEY: ${{ secrets.APP_KEY }}

jobs:
  laravel-tests:
    name: Laravel Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql
          coverage: none

      - name: Install dependencies
        working-directory: ./api
        run: composer install --prefer-dist --no-interaction

      - name: Setup Application
        working-directory: ./api
        run: |
          cp .env.example .env
          php artisan key:generate
          php artisan migrate
        
      - name: Run Laravel tests
        working-directory: ./api
        run: php artisan test

  nuxt-tests:
    name: Nuxt Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node
      uses: actions/setup-node@v2
      with:
        node-version: '20'

    - name: Install dependencies
      working-directory: ./app
      run: |
        corepack enable pnpm
        pnpm install

    - name: Run build
      working-directory: ./app
      run: pnpm build

    - name: Run Nuxt tests
      working-directory: ./app
      run: pnpm test

  deploy-api:
    name: Deploy API
    runs-on: ubuntu-latest
    needs: laravel-tests
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql
          coverage: none

      - name: Set up Node
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install dependencies
        working-directory: ./api
        run: composer install --prefer-dist --no-interaction

      - name: Setup environment
        working-directory: ./api
        run: cp .env.prod .env

      - name: Fill environment variables in .env
        working-directory: ./api
        run: |
          sed -i "s|APP_KEY=|APP_KEY=${{ secrets.APP_KEY }}|g" .env
          sed -i "s|DB_DATABASE=|DB_DATABASE=${{ secrets.DB_DATABASE }}|g" .env
          sed -i "s|DB_USERNAME=|DB_USERNAME=${{ secrets.DB_USERNAME }}|g" .env
          sed -i "s|DB_PASSWORD=|DB_PASSWORD=${{ secrets.DB_PASSWORD }}|g" .env
          sed -i "s|GITHUB_CLIENT_ID=|GITHUB_CLIENT_ID=${{ secrets.GITHUB_CLIENT_ID }}|g" .env
          sed -i "s|GITHUB_CLIENT_SECRET=|GITHUB_CLIENT_SECRET=${{ secrets.GITHUB_CLIENT_SECRET }}|g" .env
          sed -i "s|GOOGLE_CLIENT_ID=|GITHUB_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}|g" .env
          sed -i "s|GOOGLE_CLIENT_SECRET=|GITHUB_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}|g" .env

      - name: Deploy API
        working-directory: ./api
        run: npm run deploy

  deploy-app:
    name: Deploy APP
    runs-on: ubuntu-latest
    needs: nuxt-tests
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Install dependencies
        working-directory: ./app
        run: |
          corepack enable pnpm
          pnpm install

      - name: Install deployctl ⬇️
        run: deno install -A -r -f https://deno.land/x/deploy/deployctl.ts

      - name: Setup environment
        working-directory: ./app
        run: cp .env.prod .env

      - name: Build APP
        working-directory: ./app
        run: pnpm run build

      - name: Deploy APP
        working-directory: ./app
        run: pnpm run deploy